def getServerProjectSources
def getAndroidProjectSources

apply from: "${rootDir}/libraries/BuildScripts/gradle/commonStaticAnalysis.gradle"

gradle.projectsEvaluated {

    tasks.withType(JavaCompile) {
        options.compilerArgs <<
                "-Xlint:cast" <<
                "-Xlint:divzero" <<
                "-Xlint:empty" <<
                "-Xlint:deprecation" <<
                "-Xlint:finally" <<
                "-Xlint:overrides" <<
                "-Xlint:path" <<
                "-Xlint:unchecked" <<
                "-Werror"
    }

    def excludes = rootProject.extensions.findByName("staticAnalysisExcludes")
    def isServerProject = project.hasProperty('server')
    def staticAnalysisTasks = getStaticAnalysisTaskNames(isServerProject,
            isServerProject ? getServerProjectSources(excludes) : getAndroidProjectSources(excludes))

    // TODO remove empty task after repository with settings will be created
    def ideaFormatTask = System.getenv("IDEA_HOME") != null ? getIdeaFormatTask(getServerProjectSources(excludes)) : tasks.create("empty")

    task staticAnalysis {
        staticAnalysisTasks.each { task ->
            tasks.findByName(task).mustRunAfter(ideaFormatTask)
        }
        dependsOn ideaFormatTask
        dependsOn staticAnalysisTasks
        doFirst {
            generateHtmlReport(isServerProject)
        }
    }

    task staticAnalysisWithoutFormatting {
        dependsOn staticAnalysisTasks
        doFirst {
            generateHtmlReport(isServerProject)
        }
    }
}

getServerProjectSources = { excludes ->
    def sources = new ArrayList<String>()
    def sourcesDirectory = new File(project.projectDir.path, 'src')

    for (def sourceFlavorDirectory : sourcesDirectory.listFiles()) {
        def javaSourceDirectory = new File(sourceFlavorDirectory.path, 'java')
        def kotlinSourceDirectory = new File(sourceFlavorDirectory.path, 'kotlin')

        if (javaSourceDirectory.exists() && javaSourceDirectory.isDirectory()) {
            sources.add(javaSourceDirectory.absolutePath)
        }
        if (kotlinSourceDirectory.exists() && kotlinSourceDirectory.isDirectory()) {
            sources.add(kotlinSourceDirectory.absolutePath)
        }
    }
    return sources
}

getAndroidProjectSources = { excludes ->
    def sources = new ArrayList<String>()
    for (def project : rootProject.subprojects) {
        if (!project.subprojects.isEmpty() || (excludes != null && excludes.contains(project.path))) {
            continue
        }

        def sourcesDirectory = new File(project.projectDir.path, 'src')
        if (!sourcesDirectory.exists() || !sourcesDirectory.isDirectory()) {
            continue
        }

        for (def sourceFlavorDirectory : sourcesDirectory.listFiles()) {
            def javaSourceDirectory = new File(sourceFlavorDirectory.path, 'java')
            def kotlinSourceDirectory = new File(sourceFlavorDirectory.path, 'kotlin')

            if (javaSourceDirectory.exists() && javaSourceDirectory.isDirectory()) {
                sources.add(javaSourceDirectory.absolutePath)
            }
            if (kotlinSourceDirectory.exists() && kotlinSourceDirectory.isDirectory()) {
                sources.add(kotlinSourceDirectory.absolutePath)
            }
        }
    }
    return sources
}


