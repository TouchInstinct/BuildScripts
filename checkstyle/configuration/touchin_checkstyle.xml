<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<module name="Checker">
    <property name="charset" value="UTF-8"/>
    <property name="severity" value="warning"/>
    <property name="fileExtensions" value="java, properties, xml"/>

    <module name="FileTabCharacter">
        <property name="eachLine" value="true"/>
    </module>

    <module name="TreeWalker">
        <!-- CUSTOM CHECKS START-->
        <module name="NullAnnotationsCheck"/>
        <module name="CustomDeclarationOrder">
            <property name="customDeclarationOrder"
                      value="Field(static final)
                      ### Field(static)
                      ### Ctor(static)
                      ### Method(static)
                      ### Field(.*)
                      ### Ctor(.*)
                      ### Method(.*)
                      ### InnerEnum(.*)
                      ### InnerInterface(.*)
                      ### InnerClass(.*)"/>
        </module>
        <!-- CUSTOM CHECKS END-->

        <module name="AbbreviationAsWordInName">
            <property name="ignoreFinal" value="false"/>
            <property name="allowedAbbreviationLength" value="1"/>
        </module>
        <!-- <module name="AbstractClassName"/> -->
        <module name="AnnotationLocation">
            <property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF"/>
            <property name="allowSamelineSingleParameterlessAnnotation" value="false"/>
        </module>
        <module name="AnnotationLocation">
            <property name="tokens"
                      value="VARIABLE_DEF, PARAMETER_DEF, ANNOTATION_DEF, TYPECAST, LITERAL_THROWS, IMPLEMENTS_CLAUSE, TYPE_ARGUMENT, LITERAL_NEW, DOT, ANNOTATION_FIELD_DEF"/>
            <property name="allowSamelineMultipleAnnotations" value="true"/>
        </module>
        <!-- <module name="AnnotationUseStyle"/> -->
        <!-- <module name="AnonInnerLength"/> -->
        <!-- <module name="ArrayTrailingComma"/> -->
        <module name="ArrayTypeStyle"/>
        <module name="AtclauseOrder">
            <property name="tagOrder" value="@param, @return, @throws, @deprecated"/>
            <property name="target" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF"/>
        </module>
        <module name="AvoidEscapedUnicodeCharacters">
            <property name="allowEscapesForControlCharacters" value="true"/>
            <property name="allowByTailComment" value="true"/>
            <property name="allowNonPrintableEscapes" value="true"/>
        </module>
        <!-- <module name="AvoidInlineConditionals"/> -->
        <module name="AvoidNestedBlocks">
            <property name="allowInSwitchCase" value="true"/>
        </module>
        <module name="AvoidStarImport"/>
        <module name="AvoidStaticImport"/>
        <!-- <module name="BooleanExpressionComplexity"/> -->
        <module name="CatchParameterName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern"
                     value="Catch parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <!-- <module name="ClassDataAbstractionCoupling"/> -->
        <!-- <module name="ClassFanOutComplexity"/> -->
        <module name="ClassTypeParameterName">
            <property name="format" value="^[T]([A-Z][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern"
                     value="Class type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="CommentsIndentation"/>
        <module name="ConstantName"/>
        <!-- <module name="CovariantEquals"/> -->
        <!-- <module name="CustomImportOrder"/> -->
        <!-- <module name="CyclomaticComplexity"/> -->
        <!-- <module name="DeclarationOrder"/> -->
        <module name="DefaultComesLast"/>
        <!-- <module name="DescendantToken"/> -->
        <!-- <module name="DesignForExtension"/> -->
        <module name="EmptyBlock">
            <property name="option" value="TEXT"/>
            <property name="tokens"
                      value="LITERAL_WHILE, LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_DO, LITERAL_IF, LITERAL_ELSE, LITERAL_FOR, INSTANCE_INIT, STATIC_INIT, LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_CASE, LITERAL_DEFAULT"/>
        </module>
        <module name="EmptyCatchBlock">
            <property name="exceptionVariableName" value="expected"/>
        </module>
        <!-- <module name="EmptyForInitializerPad"/> -->
        <!-- <module name="EmptyForIteratorPad"/> -->
        <module name="EmptyLineSeparator">
            <property name="allowNoEmptyLineBetweenFields" value="true"/>
        </module>
        <module name="EmptyStatement"/>
        <!-- <module name="EqualsAvoidNull"/> -->
        <module name="EqualsHashCode"/>
        <!-- <module name="ExecutableStatementCount"/> -->
        <!-- <module name="ExplicitInitialization"/> -->
        <module name="FallThrough"/>
        <!-- <module name="FileLength"/> -->
        <!-- <module name="FinalClass"/> -->
        <module name="FinalLocalVariable"/>
        <module name="FinalParameters">
            <property name="tokens" value="METHOD_DEF, CTOR_DEF, LITERAL_CATCH, FOR_EACH_CLAUSE"/>
        </module>
        <module name="GenericWhitespace">
            <message key="ws.followed"
                     value="GenericWhitespace ''{0}'' is followed by whitespace."/>
            <message key="ws.preceded"
                     value="GenericWhitespace ''{0}'' is preceded with whitespace."/>
            <message key="ws.illegalFollow"
                     value="GenericWhitespace ''{0}'' should followed by whitespace."/>
            <message key="ws.notPreceded"
                     value="GenericWhitespace ''{0}'' is not preceded with whitespace."/>
        </module>
        <!-- <module name="Header"/> -->
        <!-- <module name="HiddenField"> -->
        <!-- <module name="HideUtilityClassConstructor"/> -->
        <!-- <module name="IllegalCatch"/> -->
        <!-- <module name="IllegalImport"/> -->
        <!-- <module name="IllegalInstantiation"/> -->
        <!-- <module name="IllegalThrows"/> -->
        <!-- <module name="IllegalToken"/> -->
        <module name="IllegalTokenText">
            <property name="tokens" value="STRING_LITERAL, CHAR_LITERAL"/>
            <property name="format" value="\\u00(08|09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)"/>
            <property name="message" value="Avoid using corresponding octal or Unicode escape."/>
        </module>
        <!-- <module name="IllegalType"/> -->
        <!-- <module name="ImportControl"/> -->
        <!-- <module name="ImportOrder"/> -->
        <module name="Indentation">
            <property name="basicOffset" value="4"/>
            <property name="braceAdjustment" value="0"/>
            <property name="caseIndent" value="4"/>
            <property name="throwsIndent" value="4"/>
            <property name="lineWrappingIndentation" value="4"/>
            <property name="arrayInitIndent" value="8"/>
        </module>
        <module name="InnerAssignment"/>
        <module name="InnerTypeLast"/>
        <module name="InterfaceIsType"/>
        <module name="InterfaceTypeParameterName">
            <property name="format" value="^[T]([A-Z][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern"
                     value="Class type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="JavadocMethod">
            <property name="scope" value="nothing"/>
            <property name="allowMissingParamTags" value="true"/>
            <property name="allowMissingThrowsTags" value="true"/>
            <property name="allowMissingReturnTag" value="true"/>
            <property name="minLineCount" value="2"/>
            <property name="allowedAnnotations" value="Override, Test"/>
            <property name="allowThrowsTagsForSubclasses" value="true"/>
        </module>
        <!-- <module name="JavadocPackage"/> -->
        <module name="JavadocParagraph"/>
        <!-- <module name="JavadocStyle"/> -->
        <!-- https://youtrack.jetbrains.com/issue/IDEA-121723 <module name="JavadocTagContinuationIndentation"/> -->
        <!-- <module name="JavadocType"/> -->
        <!-- <module name="JavadocVariable"/> -->
        <!-- <module name="JavaNCSS"/> -->
        <module name="LeftCurly">
            <property name="maxLineLength" value="150"/>
        </module>
        <module name="LineLength">
            <property name="max" value="150"/>
            <property name="ignorePattern" value="^package.*|^import.*|a href|href|http://|https://|ftp://"/>
        </module>
        <module name="LocalFinalVariableName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern"
                     value="Final variable/parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="LocalVariableName">
            <property name="allowOneCharVarInForLoop" value="true"/>
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern"
                     value="Local variable name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <!-- <module name="MagicNumber"/> -->
        <module name="MemberName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern"
                     value="Member name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <!-- <module name="MethodCount"/> -->
        <module name="MethodLength">
            <property name="max" value="40"/>
        </module>
        <module name="MethodName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9_]*$"/>
            <message key="name.invalidPattern"
                     value="Method name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="MethodParamPad"/>
        <module name="MethodTypeParameterName">
            <property name="format" value="^[T]([A-Z][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern"
                     value="Method type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <!-- <module name="MissingCtor"/> -->
        <!-- <module name="MissingDeprecated"/> -->
        <module name="MissingOverride"/>
        <module name="MissingSwitchDefault"/>
        <!-- <module name="ModifiedControlVariable"/> -->
        <module name="ModifierOrder"/>
        <!-- <module name="MultipleStringLiterals"/> -->
        <module name="MultipleVariableDeclarations"/>
        <module name="MutableException"/>
        <module name="NeedBraces"/>
        <!-- <module name="NestedForDepth"/> -->
        <!-- <module name="NestedIfDepth"/> -->
        <!-- <module name="NestedTryDepth"/> -->
        <!-- <module name="NewlineAtEndOfFile"/> -->
        <module name="NoClone"/>
        <module name="NoFinalizer"/>
        <module name="NoLineWrap"/>
        <module name="NonEmptyAtclauseDescription"/>
        <module name="NoWhitespaceAfter">
            <property name="tokens"
                      value="ARRAY_INIT, INC, DEC, UNARY_MINUS, UNARY_PLUS, BNOT, LNOT, DOT, ARRAY_DECLARATOR, INDEX_OP"/>
        </module>
        <module name="NoWhitespaceBefore">
            <property name="tokens" value="COMMA, SEMI, POST_INC, POST_DEC, GENERIC_END"/>
        </module>
        <!-- <module name="NPathComplexity"/> -->
        <module name="OneStatementPerLine"/>
        <module name="OneTopLevelClass"/>
        <module name="OperatorWrap">
            <property name="option" value="NL"/>
            <property name="tokens"
                      value="BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR, LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR "/>
        </module>
        <module name="OuterTypeFilename"/>
        <!-- <module name="OuterTypeNumber"/> -->
        <module name="OverloadMethodsDeclarationOrder"/>
        <!-- <module name="PackageAnnotation"/> -->
        <!-- <module name="PackageDeclaration"/> -->
        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
            <message key="name.invalidPattern"
                     value="Package name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="ParameterAssignment"/>
        <module name="ParameterName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern"
                     value="Parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <!-- <module name="ParameterNumber"/> -->
        <!-- <module name="ParenPad"/> -->
        <module name="RedundantImport"/>
        <!-- <module name="RedundantModifier"/> -->
        <!-- <module name="Regexp"/> -->
        <!-- <module name="RegexpHeader"/> -->
        <!-- <module name="RegexpMultiline"/> -->
        <!-- <module name="RegexpOnFilename"/> -->
        <!-- <module name="RegexpSingleline"/> -->
        <!-- <module name="RegexpSinglelineJava"/> -->
        <!-- <module name="ReturnCount"/> -->
        <module name="RequireThis">
            <property name="checkMethods" value="false"/>
        </module>
        <module name="RightCurly"/>
        <module name="RightCurly">
            <property name="option" value="alone"/>
            <property name="tokens" value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, LITERAL_DO, STATIC_INIT, INSTANCE_INIT"/>
        </module>
        <module name="SeparatorWrap">
            <property name="tokens" value="DOT"/>
            <property name="option" value="nl"/>
        </module>
        <module name="SeparatorWrap">
            <property name="tokens" value="COMMA"/>
            <property name="option" value="EOL"/>
        </module>
        <module name="SimplifyBooleanExpression"/>
        <module name="SimplifyBooleanReturn"/>
        <module name="SingleLineJavadoc"/>
        <module name="SingleSpaceSeparator"/>
        <module name="StaticVariableName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern"
                     value="Static variable name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="StringLiteralEquality"/>
        <module name="SummaryJavadoc">
            <property name="forbiddenSummaryFragments" value="^@return the *|^This method returns |^A [{]@code [a-zA-Z0-9]+[}]( is a )"/>
        </module>
        <!-- <module name="SuperClone"/> -->
        <!-- <module name="SuperFinalize"/> -->
        <!-- <module name="SuppressWarnings"/> -->
        <module name="SuppressWarningsHolder"/>
        <!-- <module name="ThrowsCount"/> -->
        <!-- <module name="TodoComment"/> -->
        <!-- <module name="TrailingComment"/> -->
        <!-- <module name="Translation"/> -->
        <!-- <module name="TypecastParenPad"/> -->
        <module name="TypeName">
            <message key="name.invalidPattern"
                     value="Type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <!-- <module name="UncommentedMain"/> -->
        <!-- <module name="UniqueProperties"/> -->
        <module name="UnnecessaryParentheses">
            <property name="tokens"
                      value=" EXPR, IDENT, NUM_DOUBLE, NUM_FLOAT, NUM_INT, NUM_LONG, STRING_LITERAL, LITERAL_NULL, LITERAL_FALSE, LITERAL_TRUE, ASSIGN, BAND_ASSIGN, BOR_ASSIGN, BSR_ASSIGN, BXOR_ASSIGN, DIV_ASSIGN, MINUS_ASSIGN, MOD_ASSIGN, PLUS_ASSIGN, SL_ASSIGN, SR_ASSIGN, STAR_ASSIGN"/>
        </module>
        <module name="UnusedImports"/>
        <module name="UpperEll"/>
        <module name="VariableDeclarationUsageDistance"/>
        <!-- <module name="VisibilityModifier"/> -->
        <!-- <module name="WhitespaceAfter"/> -->
        <module name="WhitespaceAround">
            <property name="allowEmptyConstructors" value="true"/>
            <property name="allowEmptyMethods" value="true"/>
            <property name="allowEmptyTypes" value="true"/>
            <property name="allowEmptyLoops" value="true"/>
            <message key="ws.notFollowed"
                     value="WhitespaceAround: ''{0}'' is not followed by whitespace. Empty blocks may only be represented as '{}' when not part of a multi-block statement (4.1.3)"/>
            <message key="ws.notPreceded"
                     value="WhitespaceAround: ''{0}'' is not preceded with whitespace."/>
        </module>
        <!-- <module name="WriteTag"/> -->
    </module>

    <module name="SuppressWarningsFilter"/>


</module>
